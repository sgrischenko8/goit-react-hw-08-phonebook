{"version":3,"file":"static/js/978.34a88d3c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://react-homework-template/./src/components/ContactList/ContactListItem/Modal/Modal.module.css?a407","components/ContactList/ContactListItem/Modal/Modal.js","webpack://react-homework-template/./src/components/ContactList/ContactListItem/ContactListItem.module.css?fe27","components/ContactList/ContactListItem/ContactListItem.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","hooks/useContactsToRender.js","components/ContactList/ContactList.js","pages/Contacts/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\"};","import { Formik, Form, Field } from 'formik';\nimport { Button } from 'components/Button/Button';\nimport Loader from 'components/Loader/Loader';\nimport toast from 'react-hot-toast';\nimport styles from './ContactForm.module.css';\nimport {\n  useGetContactsQuery,\n  useAddContactMutation,\n  useEditContactMutation,\n} from 'redux/contacts/contactsSlice';\nimport PropTypes from 'prop-types';\n\nexport const ContactForm = ({ onClose, contact }) => {\n  const initialValues = { name: '', number: '' };\n  contact?.name\n    ? (initialValues.name = contact?.name)\n    : (initialValues.name = '');\n  contact?.number\n    ? (initialValues.number = contact?.number)\n    : (initialValues.number = '');\n\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact, { isLoading }] = useAddContactMutation();\n  const [editContact, { isLoading: editLoading }] = useEditContactMutation();\n\n  const checkForEmptiness = values => {\n    if (values.name.trim() === '' || values.number.trim() === '') {\n      return true;\n    }\n  };\n\n  const addContactHandler = async (values, actions) => {\n    if (checkForEmptiness(values)) {\n      toast.error('Fill all fields');\n      return;\n    }\n    if (\n      contacts.some(\n        item => item?.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      toast.error(`${values.name} is already in contacts.`);\n      return;\n    }\n\n    try {\n      await addContact(values);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      actions.resetForm();\n    }\n  };\n\n  const editContactHandler = async (values, actions) => {\n    if (contact.name === values.name && contact.number === values.number) {\n      actions.resetForm();\n      onClose();\n      return;\n    }\n    if (checkForEmptiness(values)) {\n      toast.error('Fill all fields');\n      return;\n    }\n\n    try {\n      await editContact(contact.id, values);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      actions.resetForm();\n      onClose();\n    }\n  };\n\n  function dummyClick() {\n    return;\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={initialValues.name ? editContactHandler : addContactHandler}\n    >\n      <Form className={styles.form}>\n        <label htmlFor=\"name\" className={styles.label}>\n          Name\n        </label>\n        <Field\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"['a-zA-Z\\u0400-\\u04ff0-9\\s\\W+\\.]+\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        />\n\n        <label htmlFor=\"number\" className={styles.label}>\n          Number\n        </label>\n        <Field\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          maxLength=\"19\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +. For example +38(050)-32-74-456\"\n        />\n        <Button onClick={dummyClick}>\n          {initialValues.name ? 'Rewrite' : 'Add contact'}\n        </Button>\n        {(isLoading || editLoading) && <Loader />}\n      </Form>\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  onClose: PropTypes.func,\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport styles from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  function changeFilter(event) {\n    dispatch(setFilter(event.target.value));\n  }\n  return (\n    <label className={styles.label}>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={changeFilter}\n        placeholder=\"Find contacts by name\"\n      ></input>\n    </label>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__HA99x\",\"modal\":\"Modal_modal__euRT+\"};","import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport styles from './Modal.module.css';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ onClose, contact }) => {\n  useEffect(() => {\n    function handleKeyDown(e) {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  const handleBackdropClick = e => {\n    if (e.target.nodeName === 'DIV') {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <div className={styles.overlay} onClick={handleBackdropClick}>\n      <div className={styles.modal}>\n        <ContactForm onClose={onClose} contact={contact} />\n      </div>\n    </div>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactListItem_list__DK1u4\",\"div\":\"ContactListItem_div__qiicF\"};","import { Button } from 'components/Button/Button';\nimport Loader from 'components/Loader/Loader';\nimport { Modal } from './Modal/Modal';\nimport PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from 'redux/contacts/contactsSlice';\nimport styles from './ContactListItem.module.css';\nimport { useState } from 'react';\n\nexport const ContactListItem = ({ contact }) => {\n  const [deleteContact, { isLoading }] = useDeleteContactMutation();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const toggleModal = () => {\n    setIsModalOpen(prev => !prev);\n  };\n\n  return (\n    <>\n      <div className={styles.div}>\n        {contact.name}: {contact.number}\n      </div>\n\n      <ul className={styles.list}>\n        <li>\n          <Button onClick={() => setIsModalOpen(true)}>Edit</Button>\n        </li>\n        <li>\n          <Button onClick={() => deleteContact(contact.id)}>Delete</Button>\n        </li>\n      </ul>\n      {isModalOpen && <Modal onClose={toggleModal} contact={contact}></Modal>}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\",\"list_contacts\":\"ContactList_list_contacts__zCaQw\"};","import { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\n\nexport const useContactsToRender = contacts => {\n  const filter = useSelector(selectFilter);\n\n  const sortedContacts = [...contacts].sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n  if (!filter) {\n    return sortedContacts;\n  }\n  const normalizedFilter = filter.toLowerCase();\n  return sortedContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import { ContactListItem } from './ContactListItem/ContactListItem';\nimport styles from './ContactList.module.css';\nimport { useGetContactsQuery } from 'redux/contacts/contactsSlice';\nimport { useContactsToRender } from 'hooks/useContactsToRender';\n\nexport const ContactList = () => {\n  const { data: contacts } = useGetContactsQuery();\n\n  return (\n    <ul className={styles.list_contacts}>\n      {useContactsToRender(contacts).map(el => (\n        <li key={el.id} className={styles.item}>\n          {contacts && <ContactListItem contact={el} />}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { useGetContactsQuery } from 'redux/contacts/contactsSlice';\n\nconst Contacts = () => {\n  const { data: contacts } = useGetContactsQuery();\nconsole.log(contacts);\n  return (\n    <>\n      {contacts && (\n        <>\n          \n          <ContactForm />\n\n          <h2>Contacts</h2>\n  {contacts === [] ? <h1>Phonebook</h1> : <Filter />}\n\n          <ContactList />\n        </>\n      )}\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["ContactForm","onClose","contact","initialValues","name","number","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","isLoading","useEditContactMutation","editContact","editLoading","checkForEmptiness","values","trim","addContactHandler","actions","toast","some","item","toLowerCase","console","log","resetForm","editContactHandler","id","onSubmit","className","styles","htmlFor","type","pattern","title","maxLength","Button","onClick","Loader","Filter","dispatch","useDispatch","filter","useSelector","selectFilter","value","onChange","event","setFilter","target","placeholder","modalRoot","document","querySelector","Modal","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","nodeName","ContactListItem","useDeleteContactMutation","deleteContact","useState","isModalOpen","setIsModalOpen","prev","useContactsToRender","sortedContacts","sort","a","b","localeCompare","normalizedFilter","includes","ContactList","map","el"],"sourceRoot":""}